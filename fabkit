#!/usr/bin/env bash

source ${PWD}/.env
source ${DATA_PATH}/.lastrun 2>/dev/null
for f in ./scripts/*; do source $f; done

export GO111MODULE=on
# name of the working directory/project
export WORKSPACE=$(basename ${ROOT})

readonly ONE_ORG="OneOrgOrdererGenesis"
readonly TWO_ORGS="TwoOrgsOrdererGenesis"
readonly THREE_ORGS="ThreeOrgsOrdererGenesis"
readonly RAFT_ONE_ORG="OneOrgOrdererEtcdRaft"
readonly START_TIME="$(date -u +%s)"

unset PEER_EXEC

__yq() {
    docker run --rm -i -v "${PWD}":/workdir ${YQ_DOCKER_IMAGE} "$@"
}

__jq() {
    docker run --rm -i -v "${PWD}":/workdir ${JQ_DOCKER_IMAGE} "$@"
}

__log_setup() {
    log "===========" info
    log "Init: setup" info
    log "===========" info
    echo
    log "Docker network: $(log ${DOCKER_NETWORK} warning)" info
    log "Fabric version: $(log ${FABRIC_VERSION} warning)" info
    log "Fabric CA version: $(log ${FABRIC_CA_VERSION} warning)" info
    log "Fabric third-party version: $(log ${FABRIC_THIRDPARTY_IMAGE_VERSION} warning)" info
    log "Network configuration profile: $(log ${CONFIGTX_PROFILE_NETWORK} warning)" info
    log "Channel configuration profile: $(log ${CONFIGTX_PROFILE_CHANNEL} warning)" info
    log "Chaincode name: $(log ${CHAINCODE_NAME} warning)" info
    log "Chaincode version: $(log ${CHAINCODE_VERSION} warning)" info
    log "Organizations: $(log ${ORGS:-1} warning)" info
    log "TLS enabled: $(log ${TLS_ENABLED} warning)" info
    log "Debug mode: $(log ${DEBUG:-false} warning)" info
    log "Fresh-start mode: $(log ${RESET:-false} warning)" info
    echo
}

__set_params() {
    while [[ $# -gt 0 ]]; do
        local param="${1}"

        case $param in
        -c | --ci)
            CI=true
            shift
            ;;
        -d | --debug)
            DEBUG=true
            shift
            ;;
        -r | --reset)
            RESET=true
            shift
            ;;
        -o | --orgs)
            ORGS="${2}"
            shift 2
            ;;
        -v | --version)
            FABRIC_VERSION="${2}"
            shift 2
            ;;
        *)
            log "${1} paramater not recognized. Please run the help." error
            exit 1
            ;;
        esac
    done
}

readonly func="$1"
shift

title
if [ "$func" == "network" ]; then
    param="$1"
    shift
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    __log_setup
    if [ "$param" == "install" ]; then
        install_network
    elif [ "$param" == "start" ]; then
        start_network "$@"
    elif [ "$param" == "restart" ]; then
        restart_network
    elif [ "$param" == "stop" ]; then
        stop_network
    else
        help_network
    fi
elif [ "$func" == "explorer" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" == "start" ]; then
        start_explorer
    elif [ "$param" == "stop" ]; then
        stop_explorer
    else
        help_explorer
    fi
elif [ "$func" == "dep" ]; then
    param="$1"
    shift
    if [ "$param" == "install" ]; then
        dep_install "$@"
    elif [ "$param" == "update" ]; then
        dep_update "$@"
    else
        help_dep
    fi
elif [ "$func" == "chaincode" ]; then
    param="$1"
    shift
    if [ "$param" == "lifecycle" ]; then
        __check_fabric_version 2
        param="$1"
        shift
        if [ "$param" == "package" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_package "$@"
        elif [ "$param" == "install" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_install "$@"
        elif [ "$param" == "approve" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_approve "$@"
        elif [ "$param" == "commit" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_commit "$@"
        elif [ "$param" == "deploy" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_deploy "$@"
        else
            help_chaincode
        fi
    elif [ "$param" == "install" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_install "$@"
    elif [ "$param" == "instantiate" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_instantiate "$@"
    elif [ "$param" == "upgrade" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_upgrade "$@"
    elif [ "$param" == "test" ]; then
        chaincode_test "$@"
    elif [ "$param" == "build" ]; then
        chaincode_build "$@"
    elif [ "$param" == "package" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_pack "$@"
    elif [ "$param" == "zip" ]; then
        chaincode_zip "$@"
    elif [ "$param" == "query" ]; then
        __check_deps deploy
        __check_docker_daemon
        query "$@"
    elif [ "$param" == "invoke" ]; then
        __check_deps deploy
        __check_docker_daemon
        invoke "$@"
    else
        help_chaincode
    fi
elif [ "$func" == "generate" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" == "cryptos" ]; then
        generate_cryptos "$@"
    elif [ "$param" == "genesis" ]; then
        generate_genesis "$@"
    elif [ "$param" == "channeltx" ]; then
        generate_channeltx "$@"
    else
        help_generate
    fi
elif [ "$func" == "ca" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" == "register" ]; then
        register_user "$@"
    elif [ "$param" == "enroll" ]; then
        __check_deps deploy
        enroll_user "$@"
    elif [ "$param" == "reenroll" ]; then
        reenroll_user "$@"
    elif [ "$param" == "revoke" ]; then
        revoke_user "$@"
    else
        help_ca
    fi
elif [ "$func" == "channel" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" == "create" ]; then
        create_channel "$@"
    elif [ "$param" == "update" ]; then
        update_channel "$@"
    elif [ "$param" == "join" ]; then
        join_channel "$@"
    else
        help_channel
    fi
elif [ "$func" == "benchmark" ]; then
    param="$1"
    shift
    if [ "$param" == "load" ]; then
        __check_deps deploy
        __exec_jobs "$@"
    else
        help_benchmark
    fi
elif [ "$func" == "utils" ]; then
    param="$1"
    shift
    if [ "$param" == "tostring" ]; then
        tostring "$@"
    elif [ "$param" == "tojson" ]; then
        tojson "$@"
    else
        help_utils
    fi
else
    help
fi

END_TIME="$(date -u +%s)"
__timer ${START_TIME} ${END_TIME}
