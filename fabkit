#!/usr/bin/env bash

set -o errtrace
# echo control characters in hat notation ('^c')
stty -echoctl

# shellcheck disable=SC1090
source "${FABKIT_ROOT}/.env"
# shellcheck disable=SC1090
for f in "${FABKIT_ROOT}"/scripts/*; do source "$f"; done

trap '__catch $?' ERR
trap 'exit' INT TERM
trap 'kill 0' EXIT QUIT

export GO111MODULE=on
# shellcheck disable=SC2034
readonly ONE_ORG="OneOrgOrdererGenesis"
# shellcheck disable=SC2034
readonly TWO_ORGS="TwoOrgsOrdererGenesis"
# shellcheck disable=SC2034
readonly THREE_ORGS="ThreeOrgsOrdererGenesis"
# shellcheck disable=SC2034
readonly RAFT_ONE_ORG="OneOrgOrdererEtcdRaft"
# shellcheck disable=SC2034
readonly FABKIT_FABRIC_AVAILABLE_VERSIONS=("2.3.0" "2.3" "2.2.1" "2.2" "2.2.0" "2.1.0" "2.1" "2.0.1" "2.0.0" "2.0.0-alpha" "1.4" "1.4.9" "1.4.8" "1.4.7" "1.4.6" "1.4.5" "1.4.4" "1.4.3" "1.4.2" "1.4.1" "1.4.0" "1.3.0" "1.2.1" "1.2.0" "1.1.0")
export FABKIT_HOST_ROOT="${FABKIT_HOST_ROOT:-$FABKIT_ROOT}"

__log_setup() {
    loghead "Running setup"
    echo "Root directory: $(loginfo ${FABKIT_HOST_ROOT})"
    echo "Docker network: $(loginfo ${FABKIT_DOCKER_NETWORK})"
    echo "Fabric version: $(loginfo ${FABKIT_FABRIC_VERSION})"
    echo "Fabric CA version: $(loginfo ${FABKIT_FABRIC_CA_VERSION})"
    echo "Fabric third-party version: $(loginfo ${FABKIT_FABRIC_THIRDPARTY_IMAGE_VERSION})"
    echo "Network configuration profile: $(loginfo ${FABKIT_CONFIGTX_PROFILE_NETWORK})"
    echo "Channel configuration profile: $(loginfo ${FABKIT_CONFIGTX_PROFILE_CHANNEL})"
    echo "Chaincode name: $(loginfo ${FABKIT_CHAINCODE_NAME})"
    echo "Chaincode version: $(loginfo ${FABKIT_CHAINCODE_VERSION})"
    echo "Organizations: $(loginfo ${FABKIT_ORGS:-1})"
    echo "TLS enabled: $(loginfo ${FABKIT_TLS_ENABLED})"
    echo "Debug mode: $(loginfo ${FABKIT_DEBUG:-false})"
    echo "Fresh-start mode: $(loginfo ${FABKIT_RESET:-false})"
    echo
}

__yq() {
    if type -p yq &>/dev/null; then
        yq "$@"
    else
        docker run --rm -i -v "${PWD}":/workdir "$FABKIT_YQ_DOCKER_IMAGE" "$@"
    fi
}

__jq() {
    if type -p jq &>/dev/null; then
        jq "$@"
    else
        docker run --rm -i -v "${PWD}":/workdir "$FABKIT_JQ_DOCKER_IMAGE" "$@"
    fi
}

__set_params() {
    if [ $# -eq 0 ]; then
        __load_lastrun
        return 0
    fi

    while [ $# -gt 0 ]; do
        local param="${1}"

        case $param in
        -q | --quick-run)
            export FABKIT_QUICK_RUN=true
            shift
            ;;
        -d | --debug)
            export FABKIT_DEBUG=true
            shift
            ;;
        -r | --reset)
            export FABKIT_RESET=true
            __clean_user_path
            shift
            ;;
        -o | --orgs)
            export FABKIT_ORGS="${2:-1}"
            shift 2
            ;;
        -v | --version)
            export FABKIT_FABRIC_VERSION="${2:-$FABKIT_FABRIC_VERSION}"
            shift 2
            ;;
        *)
            logerr "${1} paramater not recognized. Please run the help."
            exit 1
            ;;
        esac
    done
}

__set_debug() {
    for param in "$@"; do
        case $param in
        -d | --debug)
            export FABKIT_DEBUG=true
            ;;
        esac
    done
}

readonly func="$1"
shift

readonly START_TIME="$(date -u +%s)"
title
__set_debug "$@"
if [ "$func" = "network" ]; then
    param="$1"
    shift
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    if [ "$param" = "install" ]; then
        __log_setup
        install_network
    elif [ "$param" = "start" ]; then
        __validate_params
        start_network "$@"
    elif [ "$param" = "restart" ]; then
        restart_network
    elif [ "$param" = "stop" ]; then
        __load_lastrun
        __log_setup
        (stop_network) &
        __spinner
    else
        help_network
    fi
elif [ "$func" = "explorer" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" = "start" ]; then
        start_explorer
    elif [ "$param" = "stop" ]; then
        stop_explorer
    else
        help_explorer
    fi
elif [ "$func" = "dep" ]; then
    param="$1"
    shift
    if [ "$param" = "install" ]; then
        dep_install "$@"
    elif [ "$param" = "update" ]; then
        dep_update "$@"
    else
        help_dep
    fi
elif [ "$func" = "chaincode" ]; then
    __load_lastrun
    param="$1"
    shift
    if [ "$param" = "lifecycle" ]; then
        __check_fabric_version 2
        param="$1"
        shift
        if [ "$param" = "package" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_package "$@"
        elif [ "$param" = "install" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_install "$@"
        elif [ "$param" = "approve" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_approve "$@"
        elif [ "$param" = "commit" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_commit "$@"
        elif [ "$param" = "deploy" ]; then
            __check_deps deploy
            __check_docker_daemon
            lc_chaincode_deploy "$@"
        else
            help_chaincode
        fi
    elif [ "$param" = "install" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_install "$@"
    elif [ "$param" = "instantiate" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_instantiate "$@"
    elif [ "$param" = "upgrade" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_upgrade "$@"
    elif [ "$param" = "test" ]; then
        chaincode_test "$@"
    elif [ "$param" = "build" ]; then
        chaincode_build "$@"
    elif [ "$param" = "package" ]; then
        __check_deps deploy
        __check_docker_daemon
        chaincode_pack "$@"
    elif [ "$param" = "zip" ]; then
        chaincode_zip "$@"
    elif [ "$param" = "query" ]; then
        __check_deps deploy
        __check_docker_daemon
        query "$@"
    elif [ "$param" = "invoke" ]; then
        __check_deps deploy
        __check_docker_daemon
        invoke "$@"
    else
        help_chaincode
    fi
elif [ "$func" = "generate" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" = "cryptos" ]; then
        generate_cryptos "$@"
    elif [ "$param" = "genesis" ]; then
        generate_genesis "$@"
    elif [ "$param" = "channeltx" ]; then
        generate_channeltx "$@"
    else
        help_generate
    fi
elif [ "$func" = "ca" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" = "register" ]; then
        register_user "$@"
    elif [ "$param" = "enroll" ]; then
        __check_deps deploy
        enroll_user "$@"
    elif [ "$param" = "reenroll" ]; then
        reenroll_user "$@"
    elif [ "$param" = "revoke" ]; then
        revoke_user "$@"
    else
        help_ca
    fi
elif [ "$func" = "channel" ]; then
    __check_deps deploy
    __check_docker_daemon
    param="$1"
    shift
    if [ "$param" = "create" ]; then
        create_channel "$@"
    elif [ "$param" = "update" ]; then
        update_channel "$@"
    elif [ "$param" = "join" ]; then
        join_channel "$@"
    else
        help_channel
    fi
elif [ "$func" = "benchmark" ]; then
    param="$1"
    shift
    if [ "$param" = "load" ]; then
        __check_deps deploy
        __exec_jobs "$@"
    else
        help_benchmark
    fi
elif [ "$func" = "utils" ]; then
    param="$1"
    shift
    if [ "$param" = "tostring" ]; then
        tostring "$@"
    elif [ "$param" = "tojson" ]; then
        tojson "$@"
    else
        help_utils
    fi
elif [ "$func" = "install" ]; then
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    __log_setup
    install_network
elif [ "$func" = "start" ]; then
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    __validate_params
    start_network "$@"
elif [ "$func" = "restart" ]; then
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    (restart_network) &
    __spinner
elif [ "$func" = "stop" ]; then
    __check_deps deploy
    __check_docker_daemon
    __set_params "$@"
    __validate_params
    __load_lastrun
    __log_setup
    (stop_network) &
    __spinner
else
    help
fi
readonly END_TIME="$(date -u +%s)"
__timer "$START_TIME" "$END_TIME"
